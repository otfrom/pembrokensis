#+TITLE: Pembrokensis
#+AUTHOR: Bruce Durling
#+EMAIL: bld@otfrom.com
#+PROPERTY: header-args :mkdirp yes :noweb-prefix no

* Pembrokensis

Pembrokensis is one of the [[https://github.com/corgi-emacs/corgi][corgwn]] with a name inspired by [[https://github.com/bodil][Bodil
Stokke]]'s account for her corgi [[https://kneel.before.dog/users/bark_maul][Abeloth Penfro KC]].

I want to make a few changes to how corgi works though, and I'd like
it to be in a literate style to explain what I'm doing. So I'm using
[[https://orgmode.org/worg/org-contrib/babel/intro.html][org-babel]].

Most of what we want to steal, or rather be inspired by, is in
[[https://github.com/corgi-emacs/corgi-packages][corgi-packages]]. One of my first choices is that I don't want to use
[[https://github.com/radian-software/straight.el][straight]] as [[https://www.gnu.org/software/emacs/manual/html_node/use-package/][use-package]] is now part of emacs and there is a [[https://git.savannah.gnu.org/cgit/emacs.git/commit/?id=2ce279680bf9c1964e98e2aa48a03d6675c386fe][:vc
keyword]] in use-package so you don't need it for random sources from
git forges.

I'm doing this in a literate style because of a talk that [[https://github.com/bloat][Andrew
Cowper]] gave at Skillsmatter (RIP) many years ago, but it was really
[[https://howardism.org/][Howard Abrams]] who inspired me to get back into it. Howard has a rather
[[https://github.com/howardabrams/dot-files][magisterial set of dot files]] that you can be inspired by as well. I'm
going to be borrowing a lot from [[https://protesilaos.com/][Prot]]'s [[https://protesilaos.com/emacs/dotemacs][literate emacs config]] too.

Thanks to [[https://mathstodon.xyz/@anemofilia/113803804376833799][anemofilia]] I've learned more about [[https://orgmode.org/manual/Noweb-Reference-Syntax.html][noweb syntax]] and how [[https://social.boiledscript.com/@hako][hako]]
configures [[https://codeberg.org/hako/Testament/src/branch/trunk/cfg/dorphine.org][dorphine]] and [[https://codeberg.org/hako/Testament/src/branch/trunk/cfg/gokuraku.org][gokuraku]] for Guix.

* Files to Create

** early-init.el

#+begin_src emacs-lisp :tangle early-init.el :noweb yes
  ;; This is where we define things that happen very early in startup
  <<early-init-helpers>>

  <<early-init-packages>>

  (provide 'early-init)
  ;;; early-init.el ends here.
#+end_src

** init.el

#+begin_src emacs-lisp :tangle init.el :noweb yes
  ;; Header information here
  <<init-helpers>>

  <<init-coda>>

  (provide 'init)
  ;;; init.el ends here.
#+end_src

** TODO guix configuration

** TODO nix configuration

* Package Installation

If we're on a wild west distro like [[https://ubuntu.com/][Ubuntu]] then we're going to want to
install packages from elpa and melpa. If we're on something like [[https://guix.gnu.org/][Guix]],
[[https://lix.systems/][lix]], or [[https://nixos.org/][NixOS]] then we want to use the internal package manager for
everything and not do it via this particular configuration.

** Where are we?

We can often (or at least often enough for NixOS, Ubuntu, and Guix),
tell what distro we are on by checking the NAME in ~/etc/os-release~
which we can then use to do the right thing in later package ensuring.

#+begin_src emacs-lisp :noweb-ref early-init-helpers
  (setq os-release
        (with-temp-buffer
          (insert-file-contents "/etc/os-release")
          (re-search-forward "^NAME\\W*\\(\\w+\\)")
          (match-string 1)))

  (setq nixos-p (string= "NixOS" os-release))

  (setq ubuntu-p (string= "Ubuntu" os-release))

  (setq guix-p (string= "Guix" os-release))
#+end_src

** Turn on Packages Installation as Needed

*** Package Settings

Since Emacs 27.1 we have to disable package.el in the early init file
if we don't want to use it. We will use it for Ubuntu, but we won't in
Guix or NixOS.

    #+BEGIN_SRC emacs-lisp :noweb-ref early-init-packages
      (if ubuntu-p
          (progn 
            (setopt package-enable-at-startup t)
            (package-initialize))
        (setopt package-enable-at-startup nil))
    #+END_SRC

    Prefer newer to avoid Emacs loading older byte-compiled files and accidentally
    old code to end up in depending files that are about to be byte-compiled.

    #+begin_src emacs-lisp :noweb-ref early-init-packages
    (setopt load-prefer-newer t)
    #+end_src

* Coda

** emacs server

Weâ€™ll want to activate this when we switch over to using this config.

#+begin_src emacs-lisp :noweb-ref init-coda
  ;; (use-package server
  ;;   :config (or (server-running-p) (server-mode)))
#+end_src

** TODO Put in auto tangle hook

I think this is from Howardism
