#+TITLE: Pembrokensis
#+AUTHOR: Bruce Durling
#+EMAIL: bld@otfrom.com
#+PROPERTY: header-args :mkdirp yes :noweb-prefix no
#+options: toc:4 num:t author:t email:t
#+startup: content indent
#+macro: latest-export-date (eval (format-time-string "%F %T %z"))
#+macro: word-count (eval (count-words (point-min) (point-max)))

*Last revised and exported on {{{latest-export-date}}} with a word
count of {{{word-count}}}.*

Pembrokensis is one of the [[https://github.com/corgi-emacs/corgi][corgwn]] with a name inspired by [[https://github.com/bodil][Bodil
Stokke]]'s account for her corgi [[https://kneel.before.dog/users/bark_maul][Abeloth Penfro KC]].

I want to make a few changes to how corgi works though, and I'd like
it to be in a literate style to explain what I'm doing. So I'm using
[[https://orgmode.org/worg/org-contrib/babel/intro.html][org-babel]].

Most of what we want to steal, or rather be inspired by, is in
[[https://github.com/corgi-emacs/corgi-packages][corgi-packages]]. One of my first choices is that I don't want to use
[[https://github.com/radian-software/straight.el][straight]] as [[https://www.gnu.org/software/emacs/manual/html_node/use-package/][use-package]] is now part of emacs and there is a [[https://git.savannah.gnu.org/cgit/emacs.git/commit/?id=2ce279680bf9c1964e98e2aa48a03d6675c386fe][:vc
keyword]] in use-package so you don't need it for random sources from
git forges.

I'm doing this in a literate style because of a talk that [[https://github.com/bloat][Andrew
Cowper]] gave at Skillsmatter (RIP) many years ago, but it was really
[[https://howardism.org/][Howard Abrams]] who inspired me to get back into it. Howard has a rather
[[https://github.com/howardabrams/dot-files][magisterial set of dot files]] that you can be inspired by as well. I'm
going to be borrowing a lot from [[https://protesilaos.com/][Prot]]'s [[https://protesilaos.com/emacs/dotemacs][literate emacs config]] too.

Thanks to [[https://mathstodon.xyz/@anemofilia/113803804376833799][anemofilia]] I've learned more about [[https://orgmode.org/manual/Noweb-Reference-Syntax.html][noweb syntax]] and how [[https://social.boiledscript.com/@hako][hako]]
configures [[https://codeberg.org/hako/Testament/src/branch/trunk/cfg/dorphine.org][dorphine]] and [[https://codeberg.org/hako/Testament/src/branch/trunk/cfg/gokuraku.org][gokuraku]] for Guix.

* Things I'd like to be able to do

That I haven't figured out yet.

 - Have a link to the org section and the org-text as comments on the
   noweb file. I know how to do it if I just tangle this file, but I'd
   like to have one file with multiple outputs.
 - Have a Table of Contents Show up when I push to github. Do I need
   to export the file instead? Who knows?

* Files to Create

** early-init.el

This gets called first and before much has happened. It is where we
need to set things like our package installation strategy.

#+begin_src emacs-lisp :tangle early-init.el :noweb yes
  ;;; early-init --- Initialise emacs

  ;;; Commentary:

  ;; This has been produced from README.org

  ;;; Code:

  ;; This is where we define things that happen very early in startup
  <<gc-config>>

  <<early-init-helpers>>

  <<early-init-packages>>

  (provide 'early-init)
  ;;; early-init.el ends here.
#+end_src

** init.el

This is the bulk of the emacs configuration.

#+begin_src emacs-lisp :tangle init.el :noweb yes
  ;;; init --- Initialise emacs

  ;;; Commentary:

  ;; This has been produced from README.org

  ;;; Code:
  <<init-helpers>>

  <<pembrokensis-defaults>>
  <<magit>>

  <<init-coda>>

  (provide 'init)
  ;;; init.el ends here.
#+end_src

** mastodonc-init.el

I'm helping out a friend with their emacs configuration. They don't
want nearly as much as I do, so they'll need a different init.el to
copy over. I'd like to produce that from here.

#+begin_src emacs-lisp :tangle mastodonc-init.el :noweb yes
  ;;; init --- Initialise emacs

  ;;; Commentary:

  ;; This has been produced from README.org

  ;;; Code:
  <<init-helpers>>

  <<pembrokensis-defaults>>
  <<magit>>

  <<init-coda>>

  (provide 'init)
  ;;; init.el ends here.
#+end_src

** user-keys.el

#+begin_src emacs-lisp :tangle user-keys.el :noweb yes
  ;;; -*- no-byte-compile: t -*-

  ;; This is your user keys file, here you can configure key bindings that will
  ;; get added to Corgi. You can also override Corgi's default bindings this way.
  ;;
  ;; Bindings here are nested, e.g. `("SPC" ("b" ("k" kill-buffer)))' means that
  ;; "space" followed by "b" and then "k" will invoke `M-x kill-buffer'.
  ;;
  ;; You can add a descriptions before the command, this will show up in a pop-up
  ;; when you press the prefix key and wait a bit. (This uses which-key)
  ;;
  ;; `("SPC" ("b" ("k" "Choose a buffer to kill" kill-buffer)))'
  ;;
  ;; Instead of a prefix key you can use a symbol like `normal' or `insert', which
  ;; designates the Evil state (what vim calls the mode). `global' means any
  ;; state, `normal|visual' means either normal or visual.
  ;;
  ;; Instead of a command like `kill-buffer' you can put a keyword like
  ;; `:eval/buffer'. This is called a "signal". In the `corgi-signals' (or
  ;; `user-signals') file these are bound to specific commands based on the major
  ;; mode. E.g. in Emacs Lisp `:eval/buffer' means `eval-buffer', whereas in
  ;; Clojure it means `cider-eval-buffer'.

  (bindings
   ;; "global" bindings are always active regardless of Evil's "state" (= vim mode)
   ;; If you don't provide this the default is `normal'.
   (global
    )

   ;; Bindings for commands are usually only active in normal and visual state.
   (normal|visual
    ("SPC"
     ("0" "Select Treemacs" treemacs-select-window)
     ("f"
      ("t" "Turn Treemacs on/off" treemacs)
      ("T" "Focus current file in file tree" treemacs-find-file))
     )))
#+end_src

** user-signals

#+begin_src emacs-lisp :tangle user-signals.el :noweb yes
  ;;; -*- no-byte-compile: t -*-

  ;; This is your user signals file, here you configure how certain signals are
  ;; handled in specific modes.

  ;; In this Corgi sample config we've included `js-comint' to demonstrate how
  ;; that works. This package allows evaluating JavaScript directly from a buffer.
  ;; Evaluating the expression before the cursor is done in Corgi with `, RET' (or
  ;; `, e e'), by telling Corgi that in JS buffers this means `js-send-last-sexp'
  ;; we get the same bindings there.
  ;;
  ;; If you prefer some other key binding for "eval", then you can do that in
  ;; `user-keys.el', and your new binding will do the right thing regardless of
  ;; the language/mode you are in.

  ((js-mode ( :eval/last-sexp js-send-last-sexp
              :eval/buffer js-send-buffer
              :eval/region js-send-region
              :repl/toggle js-comint-start-or-switch-to-repl)))
#+end_src

** TODO guix configuration

** TODO nix configuration

* Package Installation

If we're on a wild west distro like [[https://ubuntu.com/][Ubuntu]] then we're going to want to
install packages from elpa and melpa. If we're on something like [[https://guix.gnu.org/][Guix]],
[[https://lix.systems/][lix]], or [[https://nixos.org/][NixOS]] then we want to use the internal package manager for
everything and not do it via this particular configuration.

** Where are we?

We can often (or at least often enough for NixOS, Ubuntu, and Guix),
tell what distro we are on by checking the NAME in ~/etc/os-release~
which we can then use to do the right thing in later package ensuring.

#+begin_src emacs-lisp :noweb-ref early-init-helpers
  (setq os-release
        (with-temp-buffer
          (insert-file-contents "/etc/os-release")
          (re-search-forward "^NAME\\W*\\(\\w+\\)")
          (match-string 1)))

  (setq nixos-p (string= "NixOS" os-release))

  (setq ubuntu-p (string= "Ubuntu" os-release))

  (setq guix-p (string= "Guix" os-release))
#+end_src

** Turn on Packages Installation as Needed

*** Package Settings

Since Emacs 27.1 we have to disable package.el in the early init file
if we don't want to use it. We will use it for Ubuntu, but we won't in
Guix or NixOS.

    #+BEGIN_SRC emacs-lisp :noweb-ref early-init-packages
      (if ubuntu-p
          (progn 
            (setopt package-enable-at-startup t)
            (package-initialize))
        (setopt package-enable-at-startup nil))
    #+END_SRC

    Prefer newer to avoid Emacs loading older byte-compiled files and accidentally
    old code to end up in depending files that are about to be byte-compiled.

    #+begin_src emacs-lisp :noweb-ref early-init-packages
    (setopt load-prefer-newer t)
    #+end_src

* early-init setup

We want to set things in early init to speed up startup as we have a
lot more ram now than when emacs was thought of as *Eight Megs and
Continuously Swapping*. This is from the [[https://github.com/corgi-emacs/corgi/blob/main/sample-config/early-init.el][corgi sample config
early-init.el]].

#+begin_src emacs-lisp :noweb-ref gc-config
  (setq gc-cons-threshold most-positive-fixnum ; 2^61 bytes
        gc-cons-percentage 0.6)

  (add-hook 'emacs-startup-hook
            (lambda ()
              (setq gc-cons-threshold 33554432 ; 32mb
                    gc-cons-percentage 0.1)))
#+end_src

* Pembrokensis Defaults

https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#Fetching-Package-Sources
https://elpa.gnu.org/devel/doc/use-package.html#Installing-packages

This is stolen from [[https://github.com/corgi-emacs/corgi-packages/blob/main/corgi-defaults/corgi-defaults.el][corgi-defaults]]

#+begin_src emacs-lisp :noweb-ref pembrokensis-defaults
  ;; Change a bunch of Emacs defaults, from disabling the menubar and toolbar,
  ;; to fixing modifier keys on Mac and disabling the system bell.
  (use-package emacs
    :init
    (setq inhibit-startup-message t)

    ;; Allow pasting selection outside of Emacs
    (setq select-enable-clipboard t)

    ;; Show keystrokes in progress
    (setq echo-keystrokes 0.1)

    ;; Move files to trash when deleting
    (setq delete-by-moving-to-trash t)

    ;; Real emacs knights don't use shift to mark things
    (setq shift-select-mode nil)

    ;; Always display line and column numbers
    (setq line-number-mode t)
    (setq column-number-mode t)

    ;; Lines should be 80 characters wide, not 72
    (setq fill-column 80)
    (set-default 'fill-column 80)

    ;; Never insert tabs
    (set-default 'indent-tabs-mode nil)

    ;; Show me empty lines after buffer end
    (set-default 'indicate-empty-lines t)

    ;; Don't break lines for me, please
    ;; (setq-default truncate-lines t)

    ;; Allow recursive minibuffers
    (setq enable-recursive-minibuffers t)

    ;; Don't be so stingy on the memory, we have lots now. It's the distant future.
    (setq gc-cons-threshold 2000000)

    ;; Sentences do not need double spaces to end. Period.
    (set-default 'sentence-end-double-space nil)

    ;; Nic says eval-expression-print-level needs to be set to nil (turned off) so
    ;; that you can always see what's happening.
    (setq eval-expression-print-level nil)
    
    :config
    (if (fboundp 'menu-bar-mode) (menu-bar-mode -1))
    (if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
    (if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))

    ;; UTF-8 please
    (setq locale-coding-system 'utf-8)   ; pretty
    (set-terminal-coding-system 'utf-8)  ; pretty
    (set-keyboard-coding-system 'utf-8)  ; pretty
    (set-selection-coding-system 'utf-8) ; please
    (prefer-coding-system 'utf-8)        ; with sugar on top

    ;; Show active region
    (transient-mark-mode 1)
    (make-variable-buffer-local 'transient-mark-mode)
    (put 'transient-mark-mode 'permanent-local t)
    (setq-default transient-mark-mode t)

    ;; When Emacs is ran in GUI mode, configure common Emoji fonts, making it more
    ;; likely that Emoji will work out of the box
    (when (display-graphic-p)
      (set-fontset-font t 'symbol "Apple Color Emoji")
      (set-fontset-font t 'symbol "Noto Color Emoji" nil 'append)
      (set-fontset-font t 'symbol "Segoe UI Emoji" nil 'append)
      (set-fontset-font t 'symbol "Symbola" nil 'append)))

  (use-package subword
    :config
    ;; Easily navigate sillycased words
    (global-subword-mode 1))

  (use-package files
    :init
    ;; Don't make backup~ files
    ;; (setq make-backup-files nil)

    (when (not (file-directory-p (expand-file-name "backups" user-emacs-directory)))
      (make-directory (expand-file-name "backups" user-emacs-directory)))

    (when (not (file-directory-p (expand-file-name "auto-save-list" user-emacs-directory)))
      (make-directory (expand-file-name "auto-save-list" user-emacs-directory)))

    ;; Put backups and auto-save files in subdirectories, so the
    ;; user-emacs-directory doesn't clutter
    (setq backup-directory-alist
          `(("." . ,(expand-file-name "backups" user-emacs-directory)))
          auto-save-file-name-transforms
          `((".*" ,(expand-file-name "auto-save-list/" user-emacs-directory) t))))

  (use-package electric
    :init
    ;; No electric indent
    (setq electric-indent-mode nil))

  (use-package uniquify
    :init
    (setq uniquify-buffer-name-style 'forward))

  (use-package vc
    :init
    ;; Stop asking about following symlinks to version controlled files
    (setq vc-follow-symlinks t))

  (use-package terminal
    :init
    (setq ring-bell-function 'ignore))

  ;; Auto refresh buffers
  ;; Also auto refresh dired, but be quiet about it
  (use-package autorevert
    :init
    (setq global-auto-revert-non-file-buffers t)
    (setq auto-revert-verbose nil)
    :config
    (add-hook 'dired-mode-hook #'auto-revert-mode)
    (global-auto-revert-mode 1))

  ;; Transparently open compressed files
  (use-package jka-cmpr-hook
    :config
    (auto-compression-mode t))

  ;; Enable syntax highlighting for older Emacsen that have it off
  (use-package font-core
    :config
    (global-font-lock-mode t))
#+end_src

* Editor

This is stolen from corgi-editor

#+begin_src emacs-lisp 
  ;; UI configuration for that Corgi-feel. This sets up a bunch of packages like
  ;; Evil, Smartparens, Aggressive indent, Rainbow parens, expand region etc.
  ;; (use-package corgi-editor)
#+end_src

* Completion UI

This is one of the places where I've strayed quite a bit from
corgi-completion-ui. 

#+begin_src emacs-lisp
  ;; Interactive Completion user interface configuration. This sets up
  ;; a bunch of packages like Ivy (minibuffer completion), Swiper
  ;; (fuzzy search), Counsel, Projectile (project-aware commands),
  ;; Company (completion).
  ;; (use-package corgi-completion-ui)
#+end_src

* Commands

This is stolen from corgi-commands

#+begin_src emacs-lisp
  ;; The few custom commands that we ship with. This includes a few things we
  ;; emulate from Spacemacs, and commands for jumping to the user's init.el
  ;; (this file, with `SPC f e i'), or opening the user's key binding or signals
  ;; file.
  ;; (use-package corgi-commands)
#+end_src


* Clojure

This is stolen from corgi-clojure

#+begin_src emacs-lisp
  ;; Extensive setup for a good Clojure experience, including clojure-mode,
  ;; CIDER, and a modeline indicator that shows which REPLs your evaluations go
  ;; to.
  ;; Also contains `corgi/cider-pprint-eval-register', bound to `,,', see
  ;; `set-register' calls below.
  ;; (use-package corgi-clojure)
#+end_src


* Emacs Lisp

This is stolen from corgi-emacs-lisp

#+begin_src emacs-lisp
  ;; Emacs Lisp config, mainly to have a development experience that feels
  ;; similar to using CIDER and Clojure. (show results in overlay, threading
  ;; refactorings)
  ;;  (use-package corgi-emacs-lisp)
#+end_src


* corgi-stateline

I suppose I'm just using corgi-stateline

#+begin_src emacs-lisp
  ;; Change the color of the modeline based on the Evil state (e.g. green when
  ;; in insert state)
  (use-package corgi-stateline
    :config
    (global-corgi-stateline-mode))
#+end_src

* corgi-bindings

#+begin_src emacs-lisp
  ;; Package which provides corgi-keys and corgi-signals, the two files that
  ;; define all Corgi bindings, and the default files that Corkey will look for.
  ;; (use-package corgi-bindings)
#+end_src

* corkey

#+begin_src emacs-lisp
  ;; Corgi's keybinding system, which builds on top of Evil. See the manual, or
  ;; visit the key binding and signal files (with `SPC f e k', `SPC f e K', `SPC
  ;; f e s' `SPC f e S')
  ;; Put this last here, otherwise keybindings for commands that aren't loaded
  ;; yet won't be active.
  ;; (use-package corkey
  ;;   :config
  ;;   (corkey-mode 1)
  ;;   ;; Automatically pick up keybinding changes
  ;;   (corkey/load-and-watch))
#+end_src

* evil-escape

#+begin_src emacs-lisp
  ;; Customizable key sequence to escape from insert state. Defaults to `fd'
  ;; (use-package evil-escape
  ;;   :straight (evil-escape :type git :host github :repo "syl20bnr/evil-escape"
  ;;                          :fork (:host github :repo "emacsorphanage/evil-escape"))
  ;;   :diminish evil-escape-mode
  ;;   :config
  ;;   (evil-escape-mode))
#+end_src

* Javascript

#+begin_src emacs-lisp
  ;; REPL-driven development for JavaScript, included as an example of how to
  ;; configure signals, see `user-signal.el' (visit it with `SPC f e s')
  ;; (use-package js-comint)
#+end_src

* Magit and VC modes

** Magit

#+NAME: magit
#+begin_src emacs-lisp
  ;; Powerful Git integration. Corgi already ships with a single keybinding for
  ;; Magit, which will be enabled if it's installed (`SPC g s' or `magit-status').
  (use-package magit
    :init
    (when ubuntu-p
      (package-install 'magit)))

#+end_src


* Coda

** emacs server

We’ll want to activate this when we switch over to using this config.

#+begin_src emacs-lisp :noweb-ref init-coda
  ;; (use-package server
  ;;   :config (or (server-running-p) (server-mode)))
#+end_src

** TODO Put in auto tangle hook

I think this is from Howardism
